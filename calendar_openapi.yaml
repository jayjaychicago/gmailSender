openapi: 3.0.3
info:
  title: Google Calendar Write API
  description: OpenAPI specification for Google Calendar write operations (create, update, delete events)
  version: v3
  contact:
    name: Google Calendar API Documentation
    url: https://developers.google.com/calendar/api/v3/reference
servers:
  - url: https://calendarditor.myinstantapi.com/google-calendar-api-v3/v3
    description: Proxy (your edge)
  - url: https://www.googleapis.com/calendar/v3
    description: Google Calendar API v3

security:
  - oauth2: ['https://www.googleapis.com/auth/calendar.events']

paths:
  /calendars/{calendarId}/events:
    post:
      summary: Create a new event
      operationId: createEvent
      tags: [Events]
      parameters:
        - name: calendarId
          in: path
          required: true
          description: Calendar identifier (use 'primary' for the primary calendar)
          schema: { type: string, example: primary }
        - name: conferenceDataVersion
          in: query
          description: >
            Version of conference data supported by the client.
            **Required = 1** when sending `conferenceData.createRequest` to generate a Google Meet link.
          schema: { type: integer, enum: [0, 1], default: 0 }
        - name: maxAttendees
          in: query
          description: Maximum number of attendees to include in the response.
          schema: { type: integer, minimum: 1 }
        - name: sendNotifications
          in: query
          description: Deprecated. Use `sendUpdates` instead.
          deprecated: true
          schema: { type: boolean, default: false }
        - name: sendUpdates
          in: query
          description: Guests who should receive notifications about the creation of the new event.
          schema: { type: string, enum: [all, externalOnly, none], default: none }
        - name: supportsAttachments
          in: query
          description: Whether the client supports event attachments.
          schema: { type: boolean, default: false }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventWrite'
            examples:
              timed:
                summary: Timed event (mon 4â€“6pm ET)
                value:
                  summary: Meet & Greet Howarth Park
                  location: Howarth Park, Birmingham, MI
                  start: { dateTime: '2025-08-25T16:00:00-04:00', timeZone: 'America/Detroit' }
                  end:   { dateTime: '2025-08-25T18:00:00-04:00', timeZone: 'America/Detroit' }
                  recurrence: ['RRULE:FREQ=WEEKLY;BYDAY=MO']
              allDay:
                summary: All-day event
                value:
                  summary: Brookside Fall Festival
                  start: { date: '2025-10-05' }
                  end:   { date: '2025-10-06' }
              withMeet:
                summary: Timed event with Google Meet
                value:
                  summary: Family Assoc Meeting
                  start: { dateTime: '2025-09-16T08:45:00-04:00', timeZone: 'America/Detroit' }
                  end:   { dateTime: '2025-09-16T09:45:00-04:00', timeZone: 'America/Detroit' }
                  conferenceData:
                    createRequest:
                      requestId: 'meet-req-001'
                      conferenceSolutionKey: { type: 'hangoutsMeet' }
      responses:
        '200':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400': { description: Bad request (e.g., invalid field combinations) }
        '401': { description: Unauthorized }
        '403': { description: Forbidden (insufficient scope/ACL) }
        '404': { description: Calendar not found }

  /calendars/{calendarId}/events/{eventId}:
    put:
      summary: Update an existing event (full update)
      operationId: updateEvent
      tags: [Events]
      parameters:
        - name: calendarId
          in: path
          required: true
          schema: { type: string }
        - name: eventId
          in: path
          required: true
          schema: { type: string }
        - name: conferenceDataVersion
          in: query
          schema: { type: integer, enum: [0, 1], default: 0 }
        - name: maxAttendees
          in: query
          schema: { type: integer, minimum: 1 }
        - name: sendNotifications
          in: query
          description: Deprecated. Use `sendUpdates` instead.
          deprecated: true
          schema: { type: boolean, default: false }
        - name: sendUpdates
          in: query
          description: Guests who should receive notifications about the update.
          schema: { type: string, enum: [all, externalOnly, none], default: none }
        - name: supportsAttachments
          in: query
          schema: { type: boolean, default: false }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventWrite'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Event not found }

    patch:
      summary: Partially update an existing event
      operationId: patchEvent
      tags: [Events]
      parameters:
        - name: calendarId
          in: path
          required: true
          schema: { type: string }
        - name: eventId
          in: path
          required: true
          schema: { type: string }
        - name: conferenceDataVersion
          in: query
          schema: { type: integer, enum: [0, 1], default: 0 }
        - name: maxAttendees
          in: query
          schema: { type: integer, minimum: 1 }
        - name: sendNotifications
          in: query
          description: Deprecated. Use `sendUpdates` instead.
          deprecated: true
          schema: { type: boolean, default: false }
        - name: sendUpdates
          in: query
          description: Guests who should receive notifications about the update.
          schema: { type: string, enum: [all, externalOnly, none], default: none }
        - name: supportsAttachments
          in: query
          schema: { type: boolean, default: false }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # Allow partial fields on patch
              allOf:
                - $ref: '#/components/schemas/EventWrite'
      responses:
        '200':
          description: Event patched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

    delete:
      summary: Delete an event
      operationId: deleteEvent
      tags: [Events]
      parameters:
        - name: calendarId
          in: path
          required: true
          schema: { type: string }
        - name: eventId
          in: path
          required: true
          schema: { type: string }
        - name: sendNotifications
          in: query
          description: Deprecated. Use `sendUpdates` instead.
          deprecated: true
          schema: { type: boolean, default: false }
        - name: sendUpdates
          in: query
          description: Guests who should receive notifications about the cancellation.
          schema: { type: string, enum: [all, externalOnly, none], default: none }
      responses:
        '204': { description: Event deleted successfully }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Event not found }

  /calendars/{calendarId}/events/{eventId}/move:
    post:
      summary: Move an event to another calendar
      operationId: moveEvent
      tags: [Events]
      parameters:
        - name: calendarId
          in: path
          required: true
          description: Source calendar ID
          schema: { type: string }
        - name: eventId
          in: path
          required: true
          schema: { type: string }
        - name: destination
          in: query
          required: true
          description: Target calendar ID
          schema: { type: string }
        - name: sendNotifications
          in: query
          description: Deprecated. Use `sendUpdates` instead.
          deprecated: true
          schema: { type: boolean, default: false }
        - name: sendUpdates
          in: query
          schema: { type: string, enum: [all, externalOnly, none], default: none }
      responses:
        '200':
          description: Event moved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

  /calendars/{calendarId}/events/quickAdd:
    post:
      summary: Create an event from a simple text string
      operationId: quickAddEvent
      tags: [Events]
      parameters:
        - name: calendarId
          in: path
          required: true
          schema: { type: string }
        - name: text
          in: query
          required: true
          description: The natural language text describing the event.
          schema:
            type: string
            example: "Appointment at Somewhere on June 3rd 10am-10:25am"
        - name: sendNotifications
          in: query
          description: Deprecated. Use `sendUpdates` instead.
          deprecated: true
          schema: { type: boolean, default: false }
        - name: sendUpdates
          in: query
          schema: { type: string, enum: [all, externalOnly, none], default: none }
      responses:
        '200':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            'https://www.googleapis.com/auth/calendar.events': View and edit events
            'https://www.googleapis.com/auth/calendar': Full access to calendars

  schemas:
    # ---------- Write schema (requests) ----------
    EventWrite:
      type: object
      description: Payload for creating/updating events. Excludes server-managed/read-only fields.
      properties:
        status:
          type: string
          enum: [confirmed, tentative, cancelled]
        summary:
          type: string
          example: "Meet & Greet Howarth Park"
        description:
          type: string
        location:
          type: string
          example: "Howarth Park, Birmingham, MI"
        colorId:
          type: string
        # Mutually exclusive all-day vs timed:
        start:
          oneOf:
            - $ref: '#/components/schemas/EventDateAllDay'
            - $ref: '#/components/schemas/EventDateTimed'
        end:
          oneOf:
            - $ref: '#/components/schemas/EventDateAllDay'
            - $ref: '#/components/schemas/EventDateTimed'
        endTimeUnspecified:
          type: boolean
          description: >
            Only for all-day events. Don't set when using dateTime.
        recurrence:
          type: array
          items: { type: string, example: "RRULE:FREQ=WEEKLY;BYDAY=MO" }
        attendees:
          type: array
          items: { $ref: '#/components/schemas/AttendeeWrite' }
        extendedProperties:
          type: object
          properties:
            private:
              type: object
              additionalProperties: { type: string }
            shared:
              type: object
              additionalProperties: { type: string }
        conferenceData:
          $ref: '#/components/schemas/ConferenceDataWrite'
        anyoneCanAddSelf:
          type: boolean
          default: false
        guestsCanInviteOthers:
          type: boolean
          default: true
        guestsCanModify:
          type: boolean
          default: false
        guestsCanSeeOtherGuests:
          type: boolean
          default: true
        reminders:
          $ref: '#/components/schemas/Reminders'
        source:
          type: object
          properties:
            url: { type: string, format: uri }
            title: { type: string }
        attachments:
          type: array
          items: { $ref: '#/components/schemas/Attachment' }
        eventType:
          type: string
          enum: [default, outOfOffice, focusTime, workingLocation]
          default: default
      required: [start, end, summary]

    EventDateAllDay:
      type: object
      description: All-day event date (no time zone).
      properties:
        date:
          type: string
          format: date
          example: '2025-10-05'
      required: [date]
      additionalProperties: false

    EventDateTimed:
      type: object
      description: Timed event date/time with time zone.
      properties:
        dateTime:
          type: string
          format: date-time
          example: '2025-08-25T16:00:00-04:00'
        timeZone:
          type: string
          example: 'America/Detroit'
      required: [dateTime]
      additionalProperties: false

    AttendeeWrite:
      type: object
      properties:
        email:
          type: string
          format: email
        displayName:
          type: string
        resource:
          type: boolean
          default: false
        optional:
          type: boolean
          default: false
        responseStatus:
          type: string
          enum: [needsAction, declined, tentative, accepted]
        comment:
          type: string
        additionalGuests:
          type: integer
          default: 0

    ConferenceDataWrite:
      type: object
      description: >
        Include only when you want to **create** a Meet link. You must also call the endpoint with
        `?conferenceDataVersion=1`. If omitted, no conference will be created.
      properties:
        createRequest:
          type: object
          required: [requestId, conferenceSolutionKey]
          properties:
            requestId:
              type: string
              description: Unique key to avoid duplicate conference creation.
            conferenceSolutionKey:
              type: object
              required: [type]
              properties:
                type:
                  type: string
                  enum: [hangoutsMeet]

    # ---------- Read schema (responses) ----------
    Event:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        kind:
          type: string
          enum: [calendar#event]
          readOnly: true
        etag:
          type: string
          readOnly: true
        status:
          type: string
          enum: [confirmed, tentative, cancelled]
        htmlLink:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        summary:
          type: string
        description:
          type: string
        location:
          type: string
        colorId:
          type: string
        creator:
          $ref: '#/components/schemas/Person'
        organizer:
          $ref: '#/components/schemas/Person'
        start:
          oneOf:
            - $ref: '#/components/schemas/EventDateAllDay'
            - $ref: '#/components/schemas/EventDateTimed'
        end:
          oneOf:
            - $ref: '#/components/schemas/EventDateAllDay'
            - $ref: '#/components/schemas/EventDateTimed'
        endTimeUnspecified:
          type: boolean
        recurrence:
          type: array
          items: { type: string }
        recurringEventId:
          type: string
          description: Id of the recurring series if this is an instance.
          readOnly: true
        originalStartTime:
          oneOf:
            - $ref: '#/components/schemas/EventDateAllDay'
            - $ref: '#/components/schemas/EventDateTimed'
        transparency:
          type: string
          enum: [opaque, transparent]
          default: opaque
        visibility:
          type: string
          enum: [default, public, private, confidential]
          default: default
        iCalUID:
          type: string
          readOnly: true
        sequence:
          type: integer
          readOnly: true
        attendees:
          type: array
          items: { $ref: '#/components/schemas/Attendee' }
        attendeesOmitted:
          type: boolean
        extendedProperties:
          type: object
          properties:
            private:
              type: object
              additionalProperties: { type: string }
            shared:
              type: object
              additionalProperties: { type: string }
        hangoutLink:
          type: string
          readOnly: true
        conferenceData:
          $ref: '#/components/schemas/ConferenceData'
        gadget:
          type: object
        anyoneCanAddSelf:
          type: boolean
        guestsCanInviteOthers:
          type: boolean
        guestsCanModify:
          type: boolean
        guestsCanSeeOtherGuests:
          type: boolean
        privateCopy:
          type: boolean
        locked:
          type: boolean
        reminders:
          $ref: '#/components/schemas/Reminders'
        source:
          type: object
          properties:
            url: { type: string }
            title: { type: string }
        attachments:
          type: array
          items: { $ref: '#/components/schemas/Attachment' }
        eventType:
          type: string
          enum: [default, outOfOffice, focusTime, workingLocation]
          default: default

    Person:
      type: object
      properties:
        id:
          type: string
          description: Profile ID
        email:
          type: string
          format: email
        displayName:
          type: string
        self:
          type: boolean

    Attendee:
      allOf:
        - $ref: '#/components/schemas/Person'
        - type: object
          properties:
            organizer:
              type: boolean
              readOnly: true
            resource:
              type: boolean
              default: false
            optional:
              type: boolean
              default: false
            responseStatus:
              type: string
              enum: [needsAction, declined, tentative, accepted]
            comment:
              type: string
            additionalGuests:
              type: integer
              default: 0

    Reminders:
      type: object
      properties:
        useDefault:
          type: boolean
        overrides:
          type: array
          items:
            type: object
            properties:
              method:
                type: string
                enum: [email, popup]
              minutes:
                type: integer
                example: 1440

    ConferenceData:
      type: object
      properties:
        createRequest:
          type: object
        entryPoints:
          type: array
          items: { type: object }
        conferenceSolution:
          type: object
        conferenceId:
          type: string
        signature:
          type: string

    Attachment:
      type: object
      properties:
        fileUrl:
          type: string
        title:
          type: string
        mimeType:
          type: string
        iconLink:
          type: string
        fileId:
          type: string
