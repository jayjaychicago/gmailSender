openapi: 3.0.3
info:
  title: Google Calendar Write API
  description: OpenAPI specification for Google Calendar write operations (create, update, delete events )
  version: v3
  contact:
    name: Google Calendar API Documentation
    url: https://developers.google.com/calendar/api/v3/reference
servers:
  - url: https://www.googleapis.com/calendar/v3
    description: prod

security:
  - oauth2: ['https://www.googleapis.com/auth/calendar.events']

paths:
  /calendars/{calendarId}/events:
    get:
      summary: List events
      operationId: listEvents
      tags: [Events]
      parameters:
        - name: calendarId
          in: path
          required: true
          description: Calendar identifier (use 'primary' for the primary calendar)
          schema: { type: string }
          examples:
            a_window:
              summary: (a) Primary calendar
              value: primary
            b_name_search:
              summary: (b) Primary calendar
              value: primary
            c_specific_dt:
              summary: (c) Primary calendar
              value: primary

        - name: q
          in: query
          description: Free text search terms.
          schema: { type: string }
          examples:
            a_window: { summary: (a) No filter, value: "" }
            b_name_search: { summary: (b) Title "kids school event", value: "kids school event" }
            c_specific_dt: { summary: (c) No filter, value: "" }

        - name: timeMin
          in: query
          schema: { type: string, format: date-time }
          examples:
            a_window: { summary: (a) Today, value: "2025-09-17T00:00:00-04:00" }
            b_name_search: { summary: (b) Omit, value: "" }
            c_specific_dt: { summary: (c) Jan 1, 2026 noon ET, value: "2026-01-01T12:00:00-05:00" }

        - name: timeMax
          in: query
          schema: { type: string, format: date-time }
          examples:
            a_window: { summary: (a) +30 days, value: "2025-10-17T00:00:00-04:00" }
            b_name_search: { summary: (b) Omit, value: "" }
            c_specific_dt: { summary: (c) +1 hr window, value: "2026-01-01T13:00:00-05:00" }

        - name: singleEvents
          in: query
          schema: { type: boolean, default: false }
          examples:
            a_window: { value: true }
            b_name_search: { value: true }
            c_specific_dt: { value: true }

        - name: orderBy
          in: query
          schema: { type: string, enum: [startTime, updated] }
          examples:
            a_window: { value: startTime }
            b_name_search: { value: updated }
            c_specific_dt: { value: startTime }

      responses:
        '200':
          description: Events listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsList'

    post:
      summary: Create a new event
      operationId: createEvent
      tags: [Events]
      parameters:
        - name: calendarId
          in: path
          required: true
          description: Calendar identifier (use 'primary' for the primary calendar)
          schema: { type: string, example: primary }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventWrite'
            examples:
              timed:
                summary: Timed event (mon 4â€“6pm ET)
                value:
                  summary: Meet & Greet Howarth Park
                  start: { dateTime: '2025-08-25T16:00:00-04:00', timeZone: 'America/Detroit' }
                  end:   { dateTime: '2025-08-25T18:00:00-04:00', timeZone: 'America/Detroit' }
                  recurrence: ['RRULE:FREQ=WEEKLY;BYDAY=MO']
              allDay:
                summary: All-day event
                value:
                  summary: Brookside Fall Festival
                  start: { date: '2025-10-05' }
                  end:   { date: '2025-10-06' }
              withMeet:
                summary: Timed event with Google Meet
                value:
                  summary: Family Assoc Meeting
                  start: { dateTime: '2025-09-16T08:45:00-04:00', timeZone: 'America/Detroit' }
                  end:   { dateTime: '2025-09-16T09:45:00-04:00', timeZone: 'America/Detroit' }
                  conferenceData:
                    createRequest:
                      requestId: 'meet-req-001'
                      conferenceSolutionKey: { type: 'hangoutsMeet' }
      responses:
        '200':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

  /calendars/{calendarId}/events/{eventId}:
    put:
      summary: Update an existing event
      operationId: updateEvent
      tags: [Events]
      parameters:
        - name: calendarId
          in: path
          required: true
          schema: { type: string }
        - name: eventId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventWrite'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

    patch:
      summary: Partially update an event
      operationId: patchEvent
      tags: [Events]
      parameters:
        - name: calendarId
          in: path
          required: true
          schema: { type: string }
        - name: eventId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/EventWrite'
      responses:
        '200':
          description: Event patched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

    delete:
      summary: Delete an event
      operationId: deleteEvent
      tags: [Events]
      parameters:
        - name: calendarId
          in: path
          required: true
          schema: { type: string }
        - name: eventId
          in: path
          required: true
          schema: { type: string }
      responses:
        '204': { description: Event deleted successfully }

  /calendars/{calendarId}/events/quickAdd:
    post:
      summary: Create an event from a simple text string
      operationId: quickAddEvent
      tags: [Events]
      parameters:
        - name: calendarId
          in: path
          required: true
          schema: { type: string }
        - name: text
          in: query
          required: true
          schema:
            type: string
            example: "Appointment at Somewhere on June 3rd 10am-10:25am"
      responses:
        '200':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            'https://www.googleapis.com/auth/calendar.events': View and edit events
            'https://www.googleapis.com/auth/calendar': Full access to calendars

  schemas:
    EventsList:
      type: object
      properties:
        kind: { type: string, enum: [calendar#events] }
        items:
          type: array
          items: { $ref: '#/components/schemas/Event' }

    EventWrite:
      type: object
      properties:
        summary: { type: string }
        start: { oneOf: [ { $ref: '#/components/schemas/EventDateTimed' }, { $ref: '#/components/schemas/EventDateAllDay' } ] }
        end: { oneOf: [ { $ref: '#/components/schemas/EventDateTimed' }, { $ref: '#/components/schemas/EventDateAllDay' } ] }

    EventDateTimed:
      type: object
      properties:
        dateTime: { type: string, format: date-time }
        timeZone: { type: string }

    EventDateAllDay:
      type: object
      properties:
        date: { type: string, format: date }

    Event:
      type: object
      properties:
        id: { type: string }
        summary: { type: string }
        start: { oneOf: [ { $ref: '#/components/schemas/EventDateTimed' }, { $ref: '#/components/schemas/EventDateAllDay' } ] }
        end: { oneOf: [ { $ref: '#/components/schemas/EventDateTimed' }, { $ref: '#/components/schemas/EventDateAllDay' } ] }
